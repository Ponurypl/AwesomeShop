@inherits LayoutComponentBase
@inject IdentityService Identity
@inject IJSRuntime JsRuntime  
@inject NavigationManager NavigationManager
@inject ApiClient ApiClient

<MudThemeProvider IsDarkMode="true" />
<MudDialogProvider />
<MudSnackbarProvider />


<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudLink Color="Color.Inherit" Underline="Underline.None" Typo="Typo.h5" Class="ml-3" Href="/">Awesome Webshop</MudLink>
        <MudSpacer />
        @if (Identity.IsSignedIn())
        {
            <MudIconButton Icon="@Icons.Filled.ShoppingCart" Color="Color.Primary" Variant="Variant.Filled" Class="mx-4" Href="/cart"/>
            <MudMenu Label="@($"{Identity.FirstName} {Identity.LastName}")" Color="Color.Primary" AnchorOrigin="Origin.BottomRight"
                 EndIcon="@Icons.Filled.KeyboardArrowDown">
                <MudMenuItem Icon="@Icons.Filled.ViewList" Href="/orders">Orders</MudMenuItem>
                <MudMenuItem OnClick="SignOut" Icon="@Icons.Filled.Logout">Logout</MudMenuItem>
            </MudMenu>
        }
        else
        {
            <MudButton Class="mx-2" StartIcon="@Icons.Filled.Login" Color="Color.Primary" Edge="Edge.End" Href="/login">Sign in</MudButton>
            <MudButton Class="mx-2" Variant="Variant.Filled" Color="Color.Primary" Edge="Edge.End" Href="/register">Sign up</MudButton>
        }
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Medium">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;
    
    protected override void OnInitialized()
    {
        var js = (IJSInProcessRuntime)JsRuntime;
        var token = js.Invoke<string>("localStorage.getItem", "identity");
        Identity.Restore(token);
        ApiClient.SetToken(Identity.Token);
    }

    private async void SignOut()
    {
        Identity.SignOut();
        await JsRuntime.InvokeAsync<string>("localStorage.removeItem", "identity");
        ApiClient.ClearToken();
        StateHasChanged();
        NavigationManager.NavigateTo("/");
    }
    
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
}

